import 'package:flutter/material.dart';
import 'package:flutter_quill/flutter_quill.dart' as quill;
import 'dart:convert'; // ƒê·ªÉ chuy·ªÉn ƒë·ªïi JSON

class QuillEditorScreen extends StatefulWidget {
  @override
  _QuillEditorScreenState createState() => _QuillEditorScreenState();
}

class _QuillEditorScreenState extends State<QuillEditorScreen> {
  final quill.QuillController _controller = quill.QuillController.basic();
  @override
  void initState() {
    super.initState();
    _loadContent(); // üìå Khi m·ªü app, t·∫£i n·ªôi dung l√™n Quill
  }
  //  H√†m l∆∞u n·ªôi dung editor
  void _saveContent() {
    // Chuy·ªÉn n·ªôi dung t·ª´ Quill th√†nh JSON

    final jsonContent = jsonEncode(_controller.document.toDelta().toJson());
    // T·∫°o note m·ªõi n·∫øu ch∆∞a c√≥
    // G√°n thu·ªôc t√≠nh content v√†o
    // l∆∞u note ho·∫∑c c·∫≠p nh·∫≠t note
    // Hi·ªÉn th·ªã th√¥ng b√°o khi l∆∞u xong
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("ƒê√£ l∆∞u n·ªôi dung!")),
    );

    // üöÄ C√≥ th·ªÉ l∆∞u `jsonContent` v√†o file ho·∫∑c database ·ªü ƒë√¢y
    print("N·ªôi dung ƒë√£ l∆∞u: $jsonContent");
  }
  // üìå H√†m t·∫£i n·ªôi dung JSON v√†o Quill
  void _loadContent() {
    // load content t·ª´ model
    String savedJson = '{"document": [{"insert": "Ch√†o b·∫°n! ƒê√¢y l√† n·ªôi dung ƒë√£ l∆∞u.\\n"}]}';

    final data = jsonDecode(savedJson);
    final document = quill.Document.fromJson(data["document"]);

    setState(() {
      _controller.document = document; // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp n·ªôi dung c·ªßa controller
    });

    print("N·ªôi dung ƒë√£ t·∫£i l√™n Quill!");
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Ti√™u ƒë·ªÅ"),
        actions: [
          IconButton(
            icon: Icon(Icons.save),
            onPressed: _saveContent, // üìå G·ªçi h√†m l∆∞u khi nh·∫•n
          ),
        ],
      ),
      body: Column(
        children: [
          quill.QuillToolbar.simple(
            configurations: quill.QuillSimpleToolbarConfigurations(
              controller: _controller,
              showBoldButton: true,
              showItalicButton: true,
              showUnderLineButton: true,
              showColorButton: true,

              // T·∫Øt t·∫•t c·∫£ c√°c n√∫t kh√°c
              showAlignmentButtons: false,
              showFontSize: false,
              showFontFamily: false,
              showBackgroundColorButton: false,
              showListBullets: false,
              showListNumbers: false,
              showCodeBlock: false,
              showStrikeThrough: false,
              showHeaderStyle: false,
              showIndent: false,
              showInlineCode: false,
              showDividers: false,
              showSearchButton: false,
              showUndo: false,
              showRedo: false,
              showLink: false,
              showSubscript: false,
              showSuperscript: false,
              showClearFormat: false,
              showDirection: false,
              showJustifyAlignment: false,
              showCenterAlignment: false,
              showLeftAlignment: false,
              showRightAlignment: false,
              showClipboardCut: false,
              showClipboardCopy: false,
              showClipboardPaste: false,
            ),
          ),
          Expanded(
            child: Padding(
              padding: EdgeInsets.all(10),
              child: quill.QuillEditor(
                configurations: quill.QuillEditorConfigurations(
                  controller: _controller,
                  enableInteractiveSelection: true,
                  padding: EdgeInsets.all(8),
                ),
                focusNode: FocusNode(),
                scrollController: ScrollController(),
              ),
            ),
          ),
        ],
      ),
    );
  }

}

